// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id         String        @id @default(cuid()) @db.Char(25)
  name       String        @unique @db.VarChar(30)
  groups     GroupMember[]
  activities Activity[]
  // comments   Comment[]
  // likes      Like[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

// グループモデル
model Group {
  id          String        @id @default(cuid()) @db.Char(25)
  name        String        @db.VarChar(80)
  description String?
  members     GroupMember[]
  goals       Goal[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}

// グループメンバーモデル
model GroupMember {
  id        String   @id @default(cuid()) @db.Char(25)
  userId    String   @db.Char(25)
  groupId   String   @db.Char(25)
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
}

// 目標モデル
model Goal {
  id          String     @id @default(cuid()) @db.Char(25)
  groupId     String     @db.Char(25)
  group       Group      @relation(fields: [groupId], references: [id])
  title       String // e.g. "2025東京マラソン完走"
  targetDate  DateTime   @db.Date
  description String?
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// 活動記録モデル
model Activity {
  id        String   @id @default(cuid()) @db.Char(25)
  userId    String   @db.Char(25)
  goalId    String   @db.Char(25)
  user      User     @relation(fields: [userId], references: [id])
  goal      Goal     @relation(fields: [goalId], references: [id])
  distance  Int // meters (e.g. 5000 = 5km)
  duration  Int // seconds (e.g. 1800 = 30min)
  // date      DateTime
  notes     String?  @db.VarChar(255)
  // imageUrl  String?
  // comments  Comment[]
  // likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// // コメントモデル
// model Comment {
//   id         String   @id @default(cuid()) @db.Char(25)
//   content    String
//   userId     String @db.Char(25)
//   user       User     @relation(fields: [userId], references: [id])
//   activityId String @db.Char(25)
//   activity   Activity @relation(fields: [activityId], references: [id])
//   createdAt  DateTime @default(now())
// }
//
// // いいねモデル
// model Like {
//   id         String   @id @default(cuid()) @db.Char(25)
//   userId     String @db.Char(25)
//   user       User     @relation(fields: [userId], references: [id])
//   activityId String @db.Char(25)
//   activity   Activity @relation(fields: [activityId], references: [id])
//   createdAt  DateTime @default(now())
//
//   @@unique([userId, activityId])
// }
