// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid()) @db.Char(25)
  name             String            @db.VarChar(30)
  challengeMembers ChallengeMember[]
  activities       Activity[]
  messages         Message[]
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamp

  @@map("users")
}

enum ChallengeStatus {
  draft
  active
  completed

  @@map("challenge_statuses")
}

model Challenge {
  id          String          @id @default(cuid()) @db.Char(25)
  name        String          @db.VarChar(100)
  description String?         @db.Text
  targetDate  DateTime        @map("target_date") @db.Date
  status      ChallengeStatus @default(active)

  processId  String            @map("process_id") @db.Char(25)
  process    ChallengeProcess  @relation(fields: [processId], references: [id])
  members    ChallengeMember[]
  activities Activity[]
  createdAt  DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime          @updatedAt @map("updated_at") @db.Timestamp

  @@unique([processId])
  @@index([processId])
  @@map("challenges")
}

model ChallengeProcess {
  id        String     @id @default(cuid()) @db.Char(25)
  challenge Challenge?
  messages  Message[]
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamp

  @@map("challenge_processes")
}

model ChallengeMember {
  id          String    @id @default(cuid()) @db.Char(25)
  userId      String    @map("user_id") @db.Char(25)
  challengeId String    @map("challenge_id") @db.Char(25)
  role        Role      @default(member)
  user        User      @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp

  @@unique([userId, challengeId])
  @@index([challengeId])
  @@map("challenge_members")
}

model Activity {
  id          String    @id @default(cuid()) @db.Char(25)
  userId      String    @map("user_id") @db.Char(25)
  challengeId String    @map("challenge_id") @db.Char(25)
  distance    Int       @db.Integer
  duration    Int       @db.Integer
  date        DateTime  @db.Timestamp
  notes       String?   @db.Text
  imageUrl    String?   @map("image_url") @db.VarChar(255)
  user        User      @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp

  @@index([userId])
  @@index([challengeId])
  @@map("activities")
}

model Message {
  id         String           @id @default(cuid()) @db.Char(25)
  content    String           @db.Text
  userId     String           @map("user_id") @db.Char(25)
  processId  String           @map("process_id") @db.Char(25)
  activityId String?          @map("activity_id") @db.Char(25)
  user       User             @relation(fields: [userId], references: [id])
  process    ChallengeProcess @relation(fields: [processId], references: [id])
  activity   Activity?        @relation(fields: [activityId], references: [id])
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamp

  @@index([userId])
  @@index([processId])
  @@index([activityId])
  @@map("messages")
}

enum Role {
  admin
  member

  @@map("roles")
}
